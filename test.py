# File path: test.py
# # File path: test.py
# import investpy
# import requests
# from base64 import b64encode
# import investpy.utils

# # Прокси-сервер
# proxies = {
#     'http': 'http://185.233.203.223:9999',
#     'https': 'http://185.233.203.223:9999',
# }

# # Данные для аутентификации на прокси
# proxy_user = "bigidulka2"
# proxy_pass = "UPyH6u8EXIuP"

# # Создаем сессию и настраиваем её для работы с прокси и аутентификацией
# session = requests.Session()
# session.proxies.update(proxies)

# # Устанавливаем аутентификацию для прокси
# session.auth = (proxy_user, proxy_pass)

# # Настраиваем заголовки, если необходимо
# session.headers.update({
#     'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
# })

# # Переопределяем сессию в investpy
# investpy.utils.session = session

# def test_get_stocks():
#     try:
#         # Получить список акций для США
#         stocks = investpy.stocks.get_stocks(country='united states')
#         print(f"Всего акций: {len(stocks)}")
#         print(stocks.head())
#     except Exception as e:
#         print(f"Ошибка в test_get_stocks: {e}")

# def test_get_historical_data():
#     try:
#         # Получить исторические данные для акции Apple с 01/01/2020 по 01/01/2021
#         historical_data = investpy.get_stock_historical_data(
#             stock='AAPL',
#             country='united states',
#             from_date='01/01/2020',
#             to_date='01/01/2021'
#         )
#         print(historical_data.head())
#     except Exception as e:
#         print(f"Ошибка в test_get_historical_data: {e}")

# def main():
#     print("Тестируем получение списка акций:")
#     test_get_stocks()

#     print("\nТестируем получение исторических данных для AAPL:")
#     test_get_historical_data()

# if __name__ == "__main__":
#     main()

from docx import Document
from docx.shared import Pt

# Создаем новый документ
doc = Document()
doc.add_heading('Таблица функциональных требований для проекта Telegram-бот для просмотра информации о рыночных активах', level=1)

# Определяем данные для таблицы
data = [
    ["Название функции", "Входные параметры", "Выходные параметры", "Описание функции"],
    ["Просмотр списка активов", "Категория актива (акции, валюты, криптовалюты), Параметры фильтрации (по цене, объему и т.д.)",
     "Список активов (название, тикер, цена, изменения за период)", 
     "Пользователь получает список доступных активов с возможностью поиска и сортировки по различным параметрам."],
    ["Просмотр текущей информации об активе", "Тикер актива (например, BTC-USD), Период (час, день, неделя)", 
     "Актуальная информация об активе (цена, объем торгов, рыночная капитализация, изменение цены)",
     "Пользователь запрашивает и получает текущие данные об активе, такие как цена, объем торгов и рыночная капитализация за выбранный период."],
    ["Подписка на уведомления об изменении цены", "Тикер актива, Тип уведомления (изменение цены, периодическое), Параметры уведомления", 
     "Подтверждение подписки/уведомления о достижении условий", 
     "Пользователь подписывается на уведомления об изменении цены или периодические оповещения, а бот отправляет уведомление при достижении условий."],
    ["Просмотр графиков актива", "Тикер актива, Период графика (день, неделя, месяц, год)", 
     "Изображение графика изменения цены", 
     "Пользователь получает график изменения цены актива за выбранный период в виде изображения с подписью."],
    ["Управление избранными активами", "Тикер актива, Действие (добавление/удаление)", 
     "Подтверждение операции/список избранных активов", 
     "Пользователь может добавлять активы в избранное или удалять их оттуда для быстрого доступа и управления."],
    ["Управление параметрами бота", "Параметры (часовой пояс, базовая валюта, частота уведомлений)", 
     "Обновленные настройки параметров бота", 
     "Пользователь настраивает параметры бота (например, базовую валюту или частоту уведомлений) для персонализации опыта работы с ботом."],
    ["Получение помощи и справки", "Запрос справки или вопрос в поддержку", 
     "Сообщение с ответом или справочной информацией", 
     "Пользователь может запросить справочную информацию о доступных командах бота или связаться с поддержкой."],
    ["Уведомления о достижении ценового уровня", "Тикер актива, Ценовой уровень", 
     "Уведомление о достижении ценового уровня", 
     "Пользователь настраивает ценовой уровень для актива, при достижении которого бот отправляет уведомление."],
    ["Отмена подписок и уведомлений", "Список подписок/уведомлений, Действие (отмена)", 
     "Подтверждение отмены уведомления", 
     "Пользователь может отменить или изменить параметры активных подписок и уведомлений."],
    ["Проверка корректности данных при вводе", "Введенные параметры (цена, объем, тикер)", 
     "Сообщение об успешной проверке или ошибка", 
     "Бот проверяет корректность введенных данных перед выполнением операции, чтобы избежать ошибок в расчетах и отображении."],
    ["Сравнение финансовых показателей по активам", "Активы для сравнения, Период (день, неделя, месяц, год)", 
     "Сравнительная таблица показателей", 
     "Пользователь может сравнивать показатели двух или более активов за выбранный период (например, изменение цены или объем торгов)."],
    ["Отправка отчетов на email", "Email адрес, Тип отчета (например, информация об активах, статистика)", 
     "Подтверждение отправки/уведомление", 
     "Система отправляет сформированные отчеты и графики на указанный адрес электронной почты."],
    ["Формирование графиков для аналитики", "Параметры графика (актив, период, параметры отображения)", 
     "Изображение графика в формате PNG или PDF", 
     "Система создает графики или диаграммы для анализа данных по активам за выбранные периоды и сохраняет их в виде файлов."],
    ["Экспорт данных об активах в файл", "Активы (например, топ-5 акций), Формат (PDF, Excel)", 
     "Сформированный файл отчета", 
     "Пользователь может экспортировать данные о выбранных активах в удобном формате для дальнейшей обработки или презентации."],
    ["Фильтрация данных по активам", "Категория активов (акции, валюты, криптовалюты), Период", 
     "Отфильтрованные данные", 
     "Возможность фильтрации активов по различным категориям (например, криптовалюты с объемом торгов более $1 млн или акции с ростом более 5%)."],
    ["Автоматическое обновление данных об активе", "Тикер актива, Период обновления (ежечасно, ежедневно)", 
     "Обновленные данные о цене и объеме торгов", 
     "Система автоматически обновляет данные о выбранных активах в указанном периоде, чтобы предоставить пользователю актуальную информацию."],
    ["Удаление данных об активе из системы", "Тикер актива", 
     "Подтверждение удаления/обновленный список активов", 
     "Администратор системы может удалять или редактировать данные о неактуальных активах, чтобы поддерживать порядок в базе данных."],
    ["Отправка уведомлений при выходе за границы цены", "Тикер актива, Границы (верхняя и нижняя)", 
     "Уведомление о достижении или выходе за границы цены", 
     "Пользователь получает уведомления при достижении ценой актива указанных границ (например, выше $50,000 или ниже $40,000)."]
]

# Создаем таблицу в документе
table = doc.add_table(rows=1, cols=4)

# Добавляем заголовки
hdr_cells = table.rows[0].cells
for i, heading in enumerate(data[0]):
    hdr_cells[i].text = heading
    hdr_cells[i].paragraphs[0].runs[0].font.bold = True
    hdr_cells[i].paragraphs[0].runs[0].font.size = Pt(12)

# Заполняем таблицу данными
for row_data in data[1:]:
    row_cells = table.add_row().cells
    for i, cell_data in enumerate(row_data):
        row_cells[i].text = cell_data
        row_cells[i].paragraphs[0].runs[0].font.size = Pt(11)

# Устанавливаем автофит по содержимому
table.autofit = True

# Сохраняем документ
file_path = "Таблица_функциональных_требований_Telegram_бот.docx"
doc.save(file_path)

file_path
